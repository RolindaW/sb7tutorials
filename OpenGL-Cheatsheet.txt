
*
* BUFFER *
*

- glClearBufferfv

	Description: Clear specified buffer(s) to a specific color.
	Use: Rendering
	Example:

		glClearBufferfv(GL_COLOR, 0, red);

- glCreateBuffers

	Description: Create specified number of buffer objects (and so corresponding names).
	Use: Startup
	Example:

		GLuint buffer;
		glCreateBuffers(1, &buffer);
		
		- other -
		
		GLuint buffers[2];
		glCreateBuffers(2, &buffers[0]);
		
- glGenBuffers

	Description: Create specified number of buffer object names (no buffer objects are associated with the returned buffer object names until they are first bound - in this situation, error occurs if try to allocate memory).
	Use: Startup
	Example:
	
		See "glCreateBuffers".
		
- glIsBuffer

	Description: Determine if a name corresponds to a buffer object.
	Use: All
	Example:
	
		glIsBuffer(buffer).

- glBindBuffer

	Description: Bind a buffer object to a target (GL_ARRAY_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, etc.) in the current OpenGL context.
	Use: Rendering
	Example:

		glBindBuffer(GL_ARRAY_BUFFER, buffer);
		
- glBindBufferBase

	Description: Bind a buffer object to an indexed buffer target (GL_UNIFORM_BUFFER, GL_ATOMIC_COUNTER_BUFFER, etc.).
	Use: Rendering
	Example:

		glBindBufferBase(GL_UNIFORM_BUFFER, 0, buffer);
		
- glBufferStorage / glNamedBufferStorage

	Description: Allocate memory (not need to be initialized) for specified buffer object (by target - matches bound buffer object - or by name). Immutable status (sign a contract with the API that says you will never be allowed to change certain properties of your object).
	Use: Startup
	Example:

		glNamedBufferStorage(buffer,
							 1024 * 1024,
							 NULL,
							 GL_DYNAMIC_STORAGE_BIT & GL_MAP_WRITE_BIT);
							 
- glBufferData / glNamedBufferData

	Description: Orphan the old memory and allocate new storage. Can be called multiple times.
	Use: Startup
	Example:
	
		glNamedBufferData(buffer,
						  1024 * 1024,
						  NULL,
						  GL_DYNAMIC_STORAGE_BIT & GL_MAP_WRITE_BIT);
							 
- glBufferSubData / glNamedBufferSubData

	Description: Copy data into a buffer object.
	Use: Startup
	Example:

		glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(data), data);
		
- glClearBufferData / glClearNamedBufferData

	Description: Fill a buffer object's data store with a fixed value.
	Use: Startup
	Example:

		glClearNamedBufferSubData(buffer, 0, sizeof(data), data);
		
- glClearBufferSubData / glClearNamedBufferSubData

	Description: Fill all or part of buffer object's data store with a fixed value.
	Use: Startup
	Example:

		glClearNamedBufferSubData(buffer, 0, sizeof(data), data);
		
- glMapBuffer / glMapNamedBuffer

	Description: Map (get a pointer to the data store of) a buffer object.
	Use: Startup
	Example:

		void* ptr = glMapNamedBuffer(buffer, GL_WRITE_ONLY);
		
- glMapBufferRange / glMapNamedBufferRange

	Description: Map only a specific range of the buffer object (grant also additional control). Generally preferred.
	Use: Startup
	Example:

		void* ptr = glMapNamedBufferRange(buffer, 0, sizeof(data), GL_MAP_WRITE_BIT);
		
- glCopyBufferSubData / glCopyNamedBufferSubData

	Description: Copy data between buffers (dedicated GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER targets - use when read and write buffers are bound to same target).
	Use: Startup
	Example:

		glCopyBufferSubData(GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, 0, 0, 1024 * 1024);
		
- glUnmapBuffer / glUnmapNamedBuffer

	Description: Unmap the buffer object.
	Use: Startup
	Example:

		glUnmapNamedBuffer(buffer);
		
- glDeleteBuffers

	Description: Delete specified number of buffer objects.
	Use: Shutdown
	Example:

		glDeleteBuffers(1, &buffer);
		
		- other -
		
		glCreateBuffers(2, &buffers[0]);

*
* TEXTURE *
*

- glCreateTextures

	Description: Create texture objects for specified effective texture target (GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP, etc.).
	Use: Startup
	Example:
	
		GLuint texture;
		glCreateTextures(GL_TEXTURE_2D, 1, &texture);

- glTexStorage2D / glTextureStorage2D

	Description: Specify storage for all levels of a two-dimensional (or one-dimensional array) texture.
	Use: Startup
	Example:
	
		glTextureStorage2D(texture,	// Texture object
						   1,	// 1 mipmap level
						   GL_RGBA32F,	// 32-bit floating-point RGBA data
						   256, 256);	// 256 x 256 texels

- glTexImage2D

	Description: Specify a two-dimensional texture image.
	Use: Startup
	Example:
	
		???

- glTexSubImage2D / glTextureSubImage2D

	Description: Specify a two-dimensional texture subimage.
	Use: Startup
	Example:
	
		glTextureSubImage2D(texture, // Texture object
							0, // Level 0
							0, 0, // Offset 0, 0
							256, 256, // 256 x 256 texels, replace entire image
							GL_RGBA, // Four-channel data
							GL_FLOAT, // Floating-point data
							data); // Pointer to data

- glClearTexImage

	Description: Fill all a texture image (any texture type) with a constant value.
	Use: Startup / Rendering
	Example:
	
		???

- glClearTexSubImage

	Description: Fill all or part of a texture image with a constant value.
	Use: Startup / Rendering
	Example:
	
		???

- glTextureParameter*

	Description: Set the parameters of a texture embedded sampler object.	
	
		GL_TEXTURE_MAG_FILTER: Magnification filtering mode
		GL_TEXTURE_MIN_FILTER: Minification filtering mode
		
		GL_NEAREST: Nearest neighbor filtering using only base mip level
		GL_LINEAR: Linear interpolation filtering using only base mip level
		
		GL_NEAREST_MIPMAP_NEAREST: Select nearest mip level and perform nearest neighbor filtering withing in
		GL_NEAREST_MIPMAP_LINEAR: Perform linear interpolation between mip levels and perform nearest neighbor filtering withing in
		GL_LINEAR_MIPMAP_NEAREST: Select nearest mip level and perform linear interpolation filtering withing in
		GL_LINEAR_MIPMAP_LINEAR: Perform linear interpolation between mip levels and perform linear interpolation filtering withing in
		
		GL_TEXTURE_BASE_LEVEL: Base mipmap level to use
		GL_TEXTURE_MAX_LEVEL: Maximum mipmap level to use
		
		GL_TEXTURE_WRAP_S: Width component wrapping mode
		GL_TEXTURE_WRAP_T: Height component wrapping mode
		GL_TEXTURE_WRAP_R: Depth component wrapping mode
		
		GL_REPEAT
		GL_MIRRORED_REPEAT
		GL_CLAMP_TO_EDGE
		GL_CLAMP_TO_BORDER
	
	Use: Startup
	Example:
	
		glTextureParameteri(texture, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

- glGenerateTextureMipmap

	Description: Generate all the mip levels for a texture (require level 0 to be loaded).
	Use: Startup
	Example:
	
		???

- glBindTexture

	Description: Bind a named texture object to a texturing target.
	Use: Startup
	Example:
	
		glBindTexture(GL_TEXTURE_2D, texture);

- glBindTextureUnit

	Description: Bind a named texture object to the specified texture unit.
	Use: Startup
	Example:
	
		glBindTextureUnit(0, texture);

- glDeleteTextures

	Description: Delete named textures.
	Use: Shutdown
	Example:
	
		glDeleteTextures(1, &texture);

*
* SAMPLER *
*

- glCreateSamplers

	Description: Create sampler objects.
	Use: Startup
	Example:
	
		GLuint sampler;
		glCreateSamplers(1, &sampler);

- glSamplerParameter*

	Description: Set the parameters of a sampler object.
	Use: Startup
	Example:
	
		glSamplerParameteri(sampler, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

- glBindSampler

	Description: Bind a sampler object to one of the texture units.
	Use: Startup
	Example:
	
		glBindSampler(0, sampler);

- glDeleteSamplers

	Description: Delete named samplers.
	Use: Shutdown
	Example:
	
		glDeleteSamplers(1, &sampler);

*
* SHADER *
*

- glCreateShader

	Description: Create empty shader object (of specified type: GL_VERTEX_SHADER; GL_FRAGMENT_SHADER; ...), ready to accept source code and be compiled.
	Use: Startup
	Example:

		GLuint vertex_shader;
		vertex_shader = glCreateShader(GL_VERTEX_SHADER);

- glShaderSource

	Description: Hand shader source code to the shader object so that it can keep a copy of it. The shader object stores a copy of our source code.
	Use: Startup
	Example:

		static const GLchar* vertex_shader_source[] =
		{
			"#version 450 core							\n"
			"											\n"
			"void main(void)							\n"
			"{											\n"
			"	gl_Position = vec4(0.0, 0.0, 0.5, 1.0); \n"
			"}											\n"
		};
		glShaderSource(vertex_shader, 1, vertex_shader_source, NULL);

- glCompileShader

	Description: Compile whatever source code is contained in the shader object (creates an intermediate binary representation that is also stored in the shader object).
	Use: Startup
	Example:
	
		glCompileShader(vertex_shader);
		
- glDeleteShader

	Description: Delete a shader object. Once a shader has been linked into a program object, the program contains the binary code and the shader is no longer needed.
	Use: Startup
	Example:
	
		glDeleteShader(vertex_shader);

*
* PROGRAM *
*

- glCreateProgram

	Description: Create a program object to which you can attach shader objects.
	Use: Startup
	Example:
	
		GLuint program;
		program = glCreateProgram();

- glAttachShader

	Description: Attach a shader object to a program object. Creates a reference to the shader; we can then delete it, knowing that the program object will hold onto the shaderâ€™s contents as long as it needs it.
	Use: Startup
	Example:
	
		glAttachShader(program, vertex_shader);

- glLinkProgram

	Description: Link all of the shader objects attached to a program object together into code that can be run on the graphics processor.
	Use: Startup
	Example:
	
		glLinkProgram(program);
		
- glUseProgram

	Description: Tell OpenGL to use our program object for rendering.
	Use: Rendering
	Example:
	
		glUseProgram(program);

- glDeleteProgram

	Description: Delete a program object.
	Use: Shutdown
	Example:
	
		glDeleteProgram(program);

*
* UNIFORM *
*

- glGetUniformLocation

	Description: Determine the location of a uniform (by name). Passing something that is not the name of a uniform will return -1.
	Use: Startup / Rendering
	Example:

		GLint uniform_location;
		uniform_location = glGetUniformLocation(rendering_program, "mvpMatrix");
		
- glProgramUniform* / glProgramUniformMatrix*

	Description: Fill the value of specified uniform from specified program.
	Use: Startup / Rendering
	Example:
	
		const GLfloat material_color[3] = { 1.0f, 0.0f, 0.5f };
		glProgramUniform3fv(rendering_program, uniform_location, 1, material_color);

- glUniform* / glUniformMatrix*

	Description: Fill the value of specified uniform from bound program.
	Use: Startup / Rendering
	Example:
	
		const GLfloat material_color[3] = { 1.0f, 0.0f, 0.5f };
		glUniform3fv(uniform_location, 1, material_color);

- glGetUniformIndices

	Description: Get the indices of a large set of uniform block members.
	Use: Startup / Rendering
	Example:
	
		glGetUniformIndices(program, 2, uniform_names, uniform_indices);

- glGetActiveUniformsiv

	Description: Get information (GL_UNIFORM_OFFSET, GL_UNIFORM_ARRAY_STRIDE, GL_UNIFORM_MATRIX_STRIDE, etc.) about specific uniform block members.
	Use: Startup / Rendering
	Example:
	
		glGetActiveUniformsiv(program, 2, uniform_indices, GL_UNIFORM_OFFSET, uniform_offsets);

- glGetUniformBlockIndex

	Description: Find the index of a uniform block in a program.
	Use: Startup / Rendering
	Example:
	
		GLuint uniform_index = glGetUniformBlockIndex(program, "StdLayoutMaterialUniformBlock");

- glUniformBlockBinding

	Description: Assign a binding point to a uniform block.
	Use: Startup / Rendering
	Example:

		glUniformBlockBinding(program, uniform_index, 0);

*
* VERTEX *
*

- glCreateVertexArrays

	Description: Create a vertex array object (VAO - an object that represents the vertex fetch stage of the OpenGL pipeline; used to supply input to the vertex shader).
	Use: Startup
	Example:
	
		GLuint vertex_array_object;
		glCreateVertexArrays(1, &vertex_array_object);

- glBindVertexArray

	Description: Attach (or bind) a VAO to the OpenGL context.
	Use: Rendering
	Example:
	
		glBindVertexArray(vertex_array_object);

- glDeleteVertexArrays

	Description: Delete a VAO.
	Use: Shutdown
	Example:
	
		glDeleteVertexArrays(1, &vertex_array_object);
		
- glVertexAttrib*

	Description: Fill the (static) value of specified vertex attribute.
	Use: Rendering
	Example:
	
		GLfloat attrib[] = { (float)sin(currentTime) * 0.5f,
							 (float)cos(currentTime) * 0.3f,
							 0.0f, 0.0f };
		// Update the value of vertex attribute 0
		glVertexAttrib4fv(0, attrib);

- glVertexArrayAttribBinding

	Description:
	
		Set the binding that a vertex attribute uses to reference a buffer (vertex attribute index matches the location modifier used in the shader; binding index represents the relationship of a (vertex) buffer object and a vertex attribute).
		Tell OpenGL that when specific vertex array object is bound, the vertex attribute at specified index should source its data from specified buffer index.

	Use: Startup
	Example:
	
		glVertexArrayAttribBinding(vao, 0, 0);

- glVertexArrayVertexBuffer

	Description:
	
		Bind a (vertex) buffer object to one of the vertex buffer bindings.
		Tell OpenGL which buffer object our data is in and where in that buffer object the data resides (by vertex - not by vertex attribute; in bytes).
	
	Use: Startup
	Example:
	
		glVertexArrayVertexBuffer(vao, 0, buffer, 0, sizeof(float) * 4);

- glVertexArrayAttribFormat

	Description: Describe the layout and format of the data (by vertex attribute).
	Use: Startup
	Example:
	
		glVertexArrayAttribFormat(vao, 0, 4, GL_FLOAT, GL_FALSE, 0);

- glEnableVertexArrayAttrib / glDisableVertexArrayAttrib

	Description:
	
		Enable/Disable automatic filling of a vertex attribute.
		When the attribute is disabled, the vertex shader will be provided with the static information provided with glVertexAttrib*().

	Use: Startup
	Example:
	
		glEnableVertexArrayAttrib(vao, 0);

- glGetAttribLocation

	Description: Determine the location of a vertex shader input (by name). Passing something that is not the name of a vertex shader input will return -1.
	Use: Startup
	Example:

		GLint attrib_index;
		attrib_index = glGetAttribLocation(rendering_program, "position");

*
* PATCH
*

- glPatchParameteri

	Description: Set the value of specified patch parameter, e.g. the number of control points per patch (by default, 3).
	Use: Rendering
	Example:
	
		glPatchParameteri(GL_PATCH_VERTICES, 4);

*
* DRAWING
*

- glDrawArrays

	Description: Drawing command (of specified primitive type: GL_POINTS; GL_LINES; GL_TRIANGLES; GL_PATCHES) that send vertices to the OpenGL pipeline.
	Use: Rendering
	Example:
	
		glDrawArrays(GL_POINTS, 0, 1);

- glPointSize

	Description: Set the diameter of the point in pixels.
	Use: Rendering
	Example:
	
		glPointSize(40.0f);

- glPolygonMode

	Description: Determine how to draw (GL_POINT; GL_LINE; GL_FILL) specified polygons (GL_FRONT; GL_BACK; GL_FRONT_AND_BACK).
	Use: Rendering
	Example:		
		
		glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
		
- glFrontFace (+ glEnable(GL_CULL_FACE))

	Description: Determine winding order (GL_CW; GL_CCW) of the triangle.
	Use: Rendering (Culling)
	Example:		
		
		glFrontFace(GL_CCW);
		
- glCullFace (+ glEnable(GL_CULL_FACE))

	Description: Determine which types of triangles are culled (GL_FRONT; GL_BACK; GL_FRONT_AND_BACK).
	Use: Rendering (Culling)
	Example:		
		
		glCullFace(GL_BACK);
		
*
* SYSTEM
*

- glGetError

	Description: Returns the value of the error flag.
	Use: All
	Example:		
		
		GLenum error = glGetError();

- glMemoryBarrier

	Description: Specify which of OpenGLâ€™s memory subsystems (GL_ALL_BARRIER_BITS, GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT, GL_UNIFORM_BARRIER_BIT, GL_SHADER_STORAGE_BARRIER_BIT, GL_ATOMIC_COUNTER_BARRIER_BIT, etc.) should obey the barrier and which are free to ignore it and continue as they would have.
	Use: All
	Example:		
		
		glMemoryBarrier(GL_SHADER_STORAGE_BARRIER_BIT);	
