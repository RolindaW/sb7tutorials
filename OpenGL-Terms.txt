
- Core profile vs. Compatibility profile

	OpenGL specification is "forked" into to profiles.
	Core profile: Modern; Removes a number of legacy features, leaving only those that are truly accelerated by current graphics hardware.
	Compatibility profile: Maintains backward compatibility with all revisions of OpenGL back to version 1.0.

- Degenerate primitive

	A line with zero length or a triangle with zero area (have to or more vertices in the exact same place). OpenGL discards (degenerate) this type of primitive.
	
- Fixed-function stage (block) vs. Programmable shader stage

	Fixed-function stage: Non-programmable stage of the rendering pipeline. Can be (slightly) customized setting up built-in variables of the pipeline.
	Programmable shader stage: Programmable stage of the rendering pipeline. Fully customizable.
	
- Rendering pipeline stages

	Front-end vs. Back-end
	
	Front-end (vertex processing): Vertex fetching/pulling (FF); Vertex shader; Tessellation (Tessellation Control shader + Tessellation Engine (FF) + Tessellation Evaluation shader); Geometry shader.
	Vertex post-processing stage (FF): Primitive assembly; Clipping; Viewport transformation; Culling; Rasterization.
	Back-end (fragment processing): Fragment shader; Framebuffer operations (FF); Pixel operations - testing (FF); Compute shader (special; single-stage pipeline).
	
	Vertex fetching/pulling: Provide (automatically) inputs to the vertex shader.
	Tessellation control shader: Calculate (LOD: Level of Detail) tessellation level (inner and outer) to be input into the tessellation engine and define data to be passed to the tessellation evaluation shader.
	Tessellation engine: Generate new vertices based on specified tessellation levels.
	Tessellation evaluation shader: Calculate position (and others) for newly generated vertices.
	Geometry shader: Create/Discard geometry.
	
	Primitive assembly: Grouping of vertices into points (trivial), lines and triangles, i.e. primitives.
	Clipping: Determine potentially visible primitives (or which part of them). Occurs in Cartesian space (not in Clipping space; perspective division required). Results in normalized device coordinates (NDC; from -1.0 to 1.0 in x and y dimensions; from 0.0 to 1.0 in z dimension).
	Viewport transformation: Place geometry in the window (or viewport). Results in window coordinates (from (0, 0) - usually bottom left - to (width - 1, height - 1); Not pixels!!!).
	Culling: Determine whether the triangle faces toward (front-facing) or away (back-facing) from the viewer and discard desired.
	Rasterization: Determine which pixels are covered by the primitive (half-space based method for triangles). Fragment (need to be colored) generation.
	
	Fragment shader: Determine the color of each fragment.
	Framebuffer operations: Represent visible content of the screen and a number of additional regions of memory used to store per-pixel values other than color. Default framebuffer is provided by windowing system. Framebuffer object.
	Pixel operations - testing: Scissor test, stencil test (any purpose testing), depth test, blending (or logical operation) stage. Each uses its own framebuffer (single or multiple).
	
	Compute shader: Can be thought of as a separate pipeline that runs indepdendently of the other graphics-oriented stages. Work item and local workgroups.

- Vertex array object

	Represent the vertex fetch stage of the OpenGL pipeline.
	Maintains all of the state related to the input to the OpenGL pipeline: vertex attributes static values, (vertex) buffer bindings, etc.
	Only one active (bound to the OpenGL context) at a time (in practice, usually the one related to the game object being drawn).

- Vertex attribute

	An input variable to the vertex shader (i.e. input to the OpenGL graphics pipeline).
	It is how vertex data is introduced into the OpenGL pipeline.
	If you don’t specify locations in shader code (not recommended approach), OpenGL will assign locations for you (it is possible to get these indices later).
	Can be indepdendently set up (i.e. each can be feed - value assignment - different way).
	
		Static value: same value for all vertices on drawing command invoke (e.g. color of the material bound to a game object). Set by command.
		Dynamic value: own value for each vertex on drawing command invoke (e.g. space coordinates - position, surface normal or texture coordinates of a vertex relative to the geometry of a game object). Feed from buffer (require specifying data location and format).
	
	Depending on how data for dynamic values is stored:
	
		Separate attributes: Located either in different buffers or at least at different locations (offsets) in the same buffer. Structure-of-arrays (SoA) data (a set of tightly packed, independent arrays of data).
		Interleaved attributes: Located in the same buffer. Array-of-structures (AoS) form of data.
		
- Uniform

	Data that stays tha same for an entire primitive batch (e.g. transformation matrix of the geometry attached to a single game object) or longer (e.g. light sources of an entire scene).
	Pass data (not really a form of storage) directly from your application into any shader stage.
	Depending on usage in a program: active uniforms (affects the stage output; exposed by a fully linked program) vs. inactive uniforms (the compiler discards unused declared uniforms out).
	Depending on how they are declared: default block uniforms vs. uniform blocks.
	
	Default block uniforms (or non-buffered uniforms): uniforms declared in the default block - at the global scope in a shader (using GLSL uniform keyword).
	
		If you don’t specify locations in shader code (not recommended approach), OpenGL will assign locations for you (it is possible to get these indices later). All non-array/struct types will be assigned a single location.
	
	(Named) Uniform blocks (or buffered uniforms): uniforms declared in a named block (using GLSL interface blocks) whose values are stored in buffer objects.
	
		Efficient usage: single call to command to bind a uniform buffer object to a program (set values of all related uniform) - vs. multiple calls to command to set the value of all required uniforms from default block.
		Easy to reuse: use same uniform values on different programs.
		Easy to update (depending of represented data a uniform may be updated more or less frequently): update the value once in a unique buffer with a single call to command.
		Depending on memory layout (how data is stored in the buffer): standard layout vs. shared layout.
		
		Standard layout: assume (following a set of rules) specific locations (offset; can be directly specified in shader code) for members within the block. May leave some empty space between the various members of the block (making the buffer larger than it needs to be - performance loss).
		Shared layout (by default): let OpenGL decide where it would like the data (application needs to figure out - query - where to put the data so that OpenGL can read it; requires more work from the application) - most efficient.

- Shader storage block

	Buffered storage that can be both read and write (therefore more versatile than uniforms but slower access) by a shader.
	Declared in a named block (using GLSL interface blocks).
	Supports the more efficient "std430" packing layout qualifier.
	Unlimited (only by hardware resources) size.
	
- Atomic counter

	Buffered counter that can be both read and write by a shader.

- Texture

	Structured form of storage that can be both read and write by a shader.
	Most often used to store image data; also as an output alternative to default framebuffer.
	Require (similarly to buffers) creation (texture object and related name), memory allocation and target binding (to one of the multiple texture units - 0, by default, if not specified - of a target to be precise), always specifying the corresponding target (or texture type).
	Layouts: 1D, 2D (most common), 3D, rectangle (legacy 2D texture use case), cube map (related 6 square - 2D - images), buffer (buffered 1D texture use case), and multisample (multiple colors per texel), together with corresponding array forms (1D, 2D, cube map, and multisample array).
	Store multiple textures: higher order texture type vs. corresponding array texture type (e.g. 3D vs. 2D array to store multiple 2D texture type)? Array texture type not apply filtering between elements (or layers); require also using higher order texture type functions (e.g. memory allocation and data update).
	Usage depends on variable type used in shader code: sampling or imaging.
	
	KTX (Khronos TeXture format): image format that can store all of the formats supported by OpenGL and represent advanced features like mipmaps, cube maps, and so on.
	
	Texture coordinates: set of values (component number depends on texture type) used to read from a texture.
	
		Usually, pulled from per-vertex input, passed through unmodified and interpolated on vertex post-processing fixed function stage.
		Normally, single per-vertex set is enough to access every texture of the material bound to a game object.
		Can be generated offline procedurally or assigned by hand by an artist using a modeling program and stored in a game object file.
		Usually, normalized: range between 0.0 and 1.0 (it is possible specifying texture coordinates out of range).

- Texture sampling

	Represent a whole texture.
	Require binding to a texture unit.
	
	Sampler object: store sampling parameters (i.e. control how texture data is read).
		
		Easy to use same sampling parameters for a large number of textures.
		Each texture object contains an embedded sampler object used when no sampler object is bound to the corresponding texture unit.
	
	Wrapping: define how values out of the real samples are calculated (when supplied texture coordinate falls outside expected range).
	
		Mode: repeat, mirrored repeat, clamp to edge, or clamp to border (color can be specified as a sampling parameter).
		Can be specified for each component of a texture coordinate individually.
	
	Filtering: define how values between the real samples are calculated (when supplied texture coordinate falls between texels).
	
		There is almost never a one-to-one correspondence between texels in the texture map and pixels on the screen (possible by texturing geometry in 2D graphics rendering - e.g. UI elements or text).
		Texture images are always either stretched (magnification) or shrunk (minification) as they are applied to geometric surfaces (orientation, among others, can also affect).
		Mode: nearest neighbor (blocky), or linear interpolation (blurry).
	
	Mipmaps: powerful texturing technique that can improve both the rendering performance and the visual quality of a scene.
	
		Use a whole series of images (levels) from largest to smallest (each one-half the size on each axis, until all dimensions reach 1) into a single texture.
		Require one-third more memory.
		Deal with scintillation effect: aliasing artifacts that appear on the surface of objects rendered very small on screen compared to the relative size of the texture applied (most noticeable when the camera or the objects are in motion).
		Support rectangular (non-square) texture.
		Can be automatically generated by OpenGL or precomputed (best quality).
		Only for minification, as all mip levels are smaller versions of the base texture (level 0) itself.
		Supports filtering between levels (i.e. level selection).
	
	Format (sized) and type: describe existing components (and its ordering) and data type (and its size - commonly same for all components).
	
		Internal: Format and type of texture data in server side (i.e. graphics card - GPU).
		External: Format and type of texture data in client side (i.e. application - CPU).
		
	Swizzle: rearrange the component (even if missing) order of texture data on the fly as it is read by the graphics hardware (e.g. generate grayscale image from single channel texture). It is also possible to assign a fixed value (0 or 1).
	
	Layout: physical arrangement of texture data in memory (e.g. left-to-right, top-to-bottom in memory with texels closely following each other). Specify separately on both unpack (how OpenGL will read texture data from client memory - or corresponding buffer) and pack (how OpenGL will write texture data into memory
	
		Byte swapping; LSB first: redefine byte/bit ordering. Useful when application share images with other machines (endianess).
		Row length; Skip pixel; Skip rows: select only a subrectangle of the entire rectangle of image data stored in memory.
		Alignment: fit machine byte alignment that optimizes moving pixel data to and from memory (e.g. 4 bytes multiple in machines with 32-bit words). Tightly packed and byte-aligned data uses 1 byte aligment.
		Image height; Skip images: delimit and access any desired subvolume or subset of slices of an array texture.

- Texture imaging

	Represent a single image from a texture.
	Require binding to an image unit.
	Explicit texel access (no filtering) to a texture for either read and write.

- Buffer vs. Texture

	Buffer
	
		Generic storage system, i.e. support any data type.
		Require target specification only on binding (not on creation nor memory allocation).
		Can be bound to multiple targets (even at same time).
		Variable types in shader code: vertex array, uniform, storage block, and atomic counter.
		Read and write (storage block and atomic counter).
		Support atomic operation and memory barriers (storage block and atomic counter).
	
	Texture
	
		Specific storage system, i.e. support only specified data type and format.
		Required target specification on creation, memory allocation and binding.
		Can be only bound to single target (the one specified on creation).
		Variable types in shader code: sampler and image.
		Read and write (image).
		Support atomic operation and memory barriers (image).

- Texel

	Represent a color from a texture that is applied to a pixel fragment in the framebuffer.

- Memory access safety mechanisms

	OpenGL is expected to be running in deeply pipelined and highly parallel systems: multithreading (multiple shader instances running simultaneously).
	Multiple processes accessing same memory at same time to perform read and write operations is potentially risky: incomplete cycle of operations and improper ordering of operations (memory hazards: RAW or read-after-write, WAW and WAR).
	OpenGL include mechanisms to alleviate and control these dangers: atomic memory operations and memory barriers.
	
	Atomic memory operation:
	
		Sequence of a read from memory potentially followed by a write to memory that must be uninterrupted for the result to be correct.
		Operations are serialized to avoid contention (condition on which two or more threads of execution attempt to use a single shared resource), i.e. only one will get to go at one time.
		On shader code (on a member of a shader storage block).
	
	Memory barrier (or memory ordering):
	
		Synchronize (await) access to memory (by subsystem).
		On both application and shader code.

- Barycentric Coordinates Interpolation

	Interpolate vertex data across the triangle's surface.

- Homogeneous coordinte system

	Used in projective geometry (four-component variables); Here, math is simpler than in regular Cartesian space (three-component variables).

- Perspective division

	Transformation (divide all four components of the position by the last, w component) from homogeneous coordinates (or homogeneous space) to Cartesian coordinates (or Cartesian space).
	Results in normalized device coordinates (or normalized device space).
	
- Fragment

	An element that may ultimately contribute to the final color of a pixel.
	
- OpenGL Extensions

	Enhance OpenGL core functionality.
	3 major classifications of extensions: vendor, EXT (written together by two or more vendors), and ARB (official part of OpenGL).

- Buffer

	Linear blocks (memory allocations) of untyped (generic; can be used for a number of purposes - even at same time) data.
	Buffer object: represent a buffer in OpenGL. Require naming (so it can be identified), memory allocation (so data can be put in and read from) and to be bound to a target (or buffer binding point - so it can be used by OpenGL).
	
		Name: identifier for a buffer object. It is possible to generate a buffer name without an associated buffer object, but never the other way around.
		Data store: (manually) allocated memory (server side; in the memory of the graphics card) for a buffer object. Depending on used allocation command, can become immutable (neither can be resized nor redefined - flags). It can be accessed (write and read) by a) using OpenGL commands (copy existing data) or b) mapping - using also OpenGL commands - the buffer oject (direct access - e.g. load from file).
	
	Target: type of use a buffer is intended for. May have multiple binding points.
	Binding point: access point a buffer is intended to be bound. Only one buffer can be bound at a time. A buffer can be bound to multiple binding points at same time.

- Vertex buffer object (VBO)

	Common buffer object (same as any other buffer object) intended to store vertex data (so its name) for a vertex array object.
	Target: GL_ARRAY_BUFFER

- Uniform buffer object (UBO)

	Common buffer object intended to store uniform data (read-only) for a program object.
	Target: GL_UNIFORM_BUFFER
	
- Shader storage buffer object (SSBO)

	Common buffer object intended to store shader data for a program object.
	Target: GL_SHADER_STORAGE_BUFFER

- Atomic counter buffer object (ACBO)

	Common buffer object intended to store atomic counter data for a program object.
	Target: GL_ATOMIC_COUNTER_BUFFER
