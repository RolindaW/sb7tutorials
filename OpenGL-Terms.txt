
- Core profile vs. Compatibility profile

	OpenGL specification is "forked" into to profiles.
	Core profile: Modern; Removes a number of legacy features, leaving only those that are truly accelerated by current graphics hardware.
	Compatibility profile: Maintains backward compatibility with all revisions of OpenGL back to version 1.0.

- Degenerate primitive

	A line with zero length or a triangle with zero area (have to or more vertices in the exact same place). OpenGL discards (degenerate) this type of primitive.
	
- Fixed-function stage (block) vs. Programmable shader stage

	Fixed-function stage: Non-programmable stage of the rendering pipeline. Can be (slightly) customized setting up built-in variables of the pipeline.
	Programmable shader stage: Programmable stage of the rendering pipeline. Fully customizable.
	
- Rendering pipeline stages

	Front-end vs. Back-end
	
	Front-end: Vertex fetching/pulling (FF); Vertex shader; Tessellation (Tessellation Control shader + Tessellation Engine (FF) + Tessellation Evaluation shader); Geometry shader.
	Vertex post-processing stage (FF): Primitive assembly; Clipping; Rasterization; Normalized-device coordinates (NDC) transformation; Screen space transformation.
	Back-end: Fragment shader; Compute shader; Frame-buffering and testing (FF).
	
	Vertex fetching/pulling: Provide (automatically) inputs to the vertex shader.
	Tessellation control shader: Calculate (LOD: Level of Detail) tessellation level (inner and outer) to be input into the tessellation engine and define data to be passed to the tessellation evaluation shader.
	Tessellation engine: Generate new vertices based on specified tessellation levels.
	Tessellation evaluation shader: calculate position (and others) for newly generated vertices.
	
- Vertex attribute

	An input variable to the vertex shader, i.e. input to the OpenGL graphics pipeline.
	It is how vertex data is introduced into the OpenGL pipeline.

- Barycentric Coordinates Interpolation

	Interpolate vertex data across the triangle's surface.
