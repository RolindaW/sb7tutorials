
*
* BUFFER *
*

- glClearBufferfv

	Description: Clear specified buffer(s) to a specific color.
	Use: Rendering
	Example:

		glClearBufferfv(GL_COLOR, 0, red);

- glCreateBuffers

	Description: Create specified number of buffer objects (and so corresponding names).
	Use: Startup
	Example:

		GLuint buffer;
		glCreateBuffers(1, &buffer);
		
		- other -
		
		GLuint buffers[2];
		glCreateBuffers(2, &buffers[0]);
		
- glGenBuffers

	Description: Create specified number of buffer object names (no buffer objects are associated with the returned buffer object names until they are first bound - in this situation, error occurs if try to allocate memory).
	Use: Startup
	Example:
	
		See "glCreateBuffers".
		
- glIsBuffer

	Description: Determine if a name corresponds to a buffer object.
	Use: All
	Example:
	
		glIsBuffer(buffer).

- glBindBuffer

	Description: Bind a buffer object to a target (GL_ARRAY_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, etc.) in the current OpenGL context.
	Use: Startup
	Example:

		glBindBuffer(GL_ARRAY_BUFFER, buffer);
		
- glBufferStorage / glNamedBufferStorage

	Description: Allocate memory (not need to be initialized) for specified buffer object (by target - matches bound buffer object - or by name). Immutable status (sign a contract with the API that says you will never be allowed to change certain properties of your object).
	Use: Startup
	Example:

		glNamedBufferStorage(buffer,
							 1024 * 1024,
							 NULL,
							 GL_DYNAMIC_STORAGE_BIT & GL_MAP_WRITE_BIT);
							 
- glBufferData / glNamedBufferData

	Description: Orphan the old memory and allocate new storage. Can be called multiple times.
	Use: Startup
	Example:
	
		glNamedBufferData(buffer,
						  1024 * 1024,
						  NULL,
						  GL_DYNAMIC_STORAGE_BIT & GL_MAP_WRITE_BIT);
							 
- glBufferSubData / glNamedBufferSubData

	Description: Copy data into a buffer object.
	Use: Startup
	Example:

		glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(data), data);
		
- glClearBufferData / glClearNamedBufferData

	Description: Fill a buffer object's data store with a fixed value.
	Use: Startup
	Example:

		glClearNamedBufferSubData(buffer, 0, sizeof(data), data);
		
- glClearBufferSubData / glClearNamedBufferSubData

	Description: Fill all or part of buffer object's data store with a fixed value.
	Use: Startup
	Example:

		glClearNamedBufferSubData(buffer, 0, sizeof(data), data);
		
- glMapBuffer / glMapNamedBuffer

	Description: Map (get a pointer to the data store of) a buffer object.
	Use: Startup
	Example:

		void* ptr = glMapNamedBuffer(buffer, GL_WRITE_ONLY);
		
- glMapBufferRange / glMapNamedBufferRange

	Description: Map only a specific range of the buffer object (grant also additional control). Generally preferred.
	Use: Startup
	Example:

		void* ptr = glMapNamedBufferRange(buffer, 0, sizeof(data), GL_MAP_WRITE_BIT);
		
- glCopyBufferSubData / glCopyNamedBufferSubData

	Description: Copy data between buffers (dedicated GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER targets - use when read and write buffers are bound to same target).
	Use: Startup
	Example:

		glCopyBufferSubData(GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, 0, 0, 1024 * 1024);
		
- glUnmapBuffer / glUnmapNamedBuffer

	Description: Unmap the buffer object.
	Use: Startup
	Example:

		glUnmapNamedBuffer(buffer);
		
- glDeleteBuffers

	Description: Delete specified number of buffer objects.
	Use: Shutdown
	Example:

		glDeleteBuffers(1, &buffer);
		
		- other -
		
		glCreateBuffers(2, &buffers[0]);

*
* SHADER *
*

- glCreateShader

	Description: Create empty shader object (of specified type: GL_VERTEX_SHADER; GL_FRAGMENT_SHADER; ...), ready to accept source code and be compiled.
	Use: Startup
	Example:

		GLuint vertex_shader;
		vertex_shader = glCreateShader(GL_VERTEX_SHADER);

- glShaderSource

	Description: Hand shader source code to the shader object so that it can keep a copy of it. The shader object stores a copy of our source code.
	Use: Startup
	Example:

		static const GLchar* vertex_shader_source[] =
		{
			"#version 450 core							\n"
			"											\n"
			"void main(void)							\n"
			"{											\n"
			"	gl_Position = vec4(0.0, 0.0, 0.5, 1.0); \n"
			"}											\n"
		};
		glShaderSource(vertex_shader, 1, vertex_shader_source, NULL);

- glCompileShader

	Description: Compile whatever source code is contained in the shader object (creates an intermediate binary representation that is also stored in the shader object).
	Use: Startup
	Example:
	
		glCompileShader(vertex_shader);
		
- glDeleteShader

	Description: Delete a shader object. Once a shader has been linked into a program object, the program contains the binary code and the shader is no longer needed.
	Use: Startup
	Example:
	
		glDeleteShader(vertex_shader);

*
* PROGRAM *
*

- glCreateProgram

	Description: Create a program object to which you can attach shader objects.
	Use: Startup
	Example:
	
		GLuint program;
		program = glCreateProgram();

- glAttachShader

	Description: Attach a shader object to a program object. Creates a reference to the shader; we can then delete it, knowing that the program object will hold onto the shaderâ€™s contents as long as it needs it.
	Use: Startup
	Example:
	
		glAttachShader(program, vertex_shader);

- glLinkProgram

	Description: Link all of the shader objects attached to a program object together into code that can be run on the graphics processor.
	Use: Startup
	Example:
	
		glLinkProgram(program);
		
- glUseProgram

	Description: Tell OpenGL to use our program object for rendering.
	Use: Rendering
	Example:
	
		glUseProgram(program);

- glDeleteProgram

	Description: Delete a program object.
	Use: Shutdown
	Example:
	
		glDeleteProgram(program);

*
* VERTEX *
*

- glCreateVertexArrays

	Description: Create a vertex array object (VAO - an object that represents the vertex fetch stage of the OpenGL pipeline; used to supply input to the vertex shader).
	Use: Startup
	Example:
	
		GLuint vertex_array_object;
		glCreateVertexArrays(1, &vertex_array_object);

- glBindVertexArray

	Description: Attach (or bind) a VAO to the OpenGL context.
	Use: Startup
	Example:
	
		glBindVertexArray(vertex_array_object);

- glDeleteVertexArrays

	Description: Delete a VAO.
	Use: Shutdown
	Example:
	
		glDeleteVertexArrays(1, &vertex_array_object);
		
- glVertexAttrib*

	Description: Fill the value of specified vertex attribute.
	Use: Rendering
	Example:
	
		GLfloat attrib[] = { (float)sin(currentTime) * 0.5f,
							 (float)cos(currentTime) * 0.3f,
							 0.0f, 0.0f };
		// Update the value of vertex attribute 0
		glVertexAttrib4fv(0, attrib);
		
*
* PATCH
*

- glPatchParameteri

	Description: Set the value of specified patch parameter, e.g. the number of control points per patch (by default, 3).
	Use: Rendering
	Example:
	
		glPatchParameteri(GL_PATCH_VERTICES, 4);

*
* DRAWING
*

- glDrawArrays

	Description: Drawing command (of specified primitive type: GL_POINTS; GL_LINES; GL_TRIANGLES; GL_PATCHES) that send vertices to the OpenGL pipeline.
	Use: Rendering
	Example:
	
		glDrawArrays(GL_POINTS, 0, 1);

- glPointSize

	Description: Set the diameter of the point in pixels.
	Use: Rendering
	Example:
	
		glPointSize(40.0f);

- glPolygonMode

	Description: Determine how to draw (GL_POINT; GL_LINE; GL_FILL) specified polygons (GL_FRONT; GL_BACK; GL_FRONT_AND_BACK).
	Use: Rendering
	Example:		
		
		glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
		
- glFrontFace (+ glEnable(GL_CULL_FACE))

	Description: Determine winding order (GL_CW; GL_CCW) of the triangle.
	Use: Rendering (Culling)
	Example:		
		
		glFrontFace(GL_CCW);
		
- glCullFace (+ glEnable(GL_CULL_FACE))

	Description: Determine which types of triangles are culled (GL_FRONT; GL_BACK; GL_FRONT_AND_BACK).
	Use: Rendering (Culling)
	Example:		
		
		glCullFace(GL_BACK);
		
*
* SYSTEM
*

glGetError returns the value of the error flag

- glGetError

	Description: Returns the value of the error flag.
	Use: All
	Example:		
		
		GLenum error = glGetError();
