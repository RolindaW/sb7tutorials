
- in

	Description: A storage qualifier (keyword) to define input variables.
	Use: All
	Type: Custom (user-defined) input variable
	Example:
	
		layout (location = 0) in vec4 offset;
		gl_Position = vertices[gl_VertexID] + offset;
		
- out

	Description: A storage qualifier to define output variables.
	Use: All
	Type: Custom output variable
	Example:
	
		out vec4 color;
		color = vec4(0.0, 0.8, 1.0, 1.0);
		
- uniform

	Description: A storage qualifier to define input variables. It is possible to initialize them to a default value in a shader.
	Use: All
	Type: Custom constant input variable
	Example:
	
		uniform vec4 material_color;
		
- interface blocks

	Description: Group together a number of input/output variables. Block name (uppercase; match between stages - shaders) vs. instance name (lowercase; reference in shader). Only between stages; not input/output to/from OpenGL graphics pipeline.
	Use: All
	Type: Custom input/output variable
	Example:
	
		out vS_OUT
		{
			vec4 color;
		} vs_out;
		vs_out.color = vec4(0.0, 0.8, 1.0, 1.0);
		
- uniform blocks

	Description: Use case of interface blocks. It is possibly specifying a layout qualifier (packed, shared - default, std140, etc.) for the memory layout.
	Use: All
	Type: Custom constant input variable
	Example:
	
		layout (std140) uniform StdLayoutMaterialUniformBlock
		{
			vec3 color;
		} material;
		vec3 mixed_color = mix(color, material.color, 0.4);
		
- layout

	Description: A layout qualifier (keyword) to affect where the storage for a variable comes from.
	Use: All
	Type: Custom input/output variable
	Example:
	
		layout (location = 0) in vec4 offset;

- gl_Position

	Description: Output position of the vertex ("clip space" coordinates).
	Use: Vertex shader
	Type: Built-in output variable (mandatory)
	Example:
	
		gl_Position = vec4(0.0, 0.0, 0.5, 1.0);
		
- gl_VertexID

	Description: The index of the vertex that is being processed at the time. Starts counting from the value given by the first parameter of glDrawArrays() and counts upward one vertex at a time for count vertices (the third parameter of glDrawArrays()).
	Use: Vertex shader
	Type: Built-in input variable
	Example:
	
		const vec4 vertices[3] = vec4[3](vec4( 0.25, -0.25, 0.5, 1.0),
										 vec4(-0.25, -0.25, 0.5, 1.0),
										 vec4( 0.25,  0.25, 0.5, 1.0));
		gl_Position = vertices[gl_VertexID];
		
- gl_in / gl_out

	Description: Built in variable.
	Use: All
	Type: Built-in input/output variable
	Example:
	
		gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
		
- gl_TessLevelInner / gl_TessLevelOuter

	Description: Set tessellation levels (factor) so tessellation engine can use in later stage.
	Use: Tessellation control shader
	Type: Built-in output variable
	Example:
	
		if (gl_InvocationID == 0)
		{
			gl_TessLevelInner[0] = 5.0;
			gl_TessLevelOuter[0] = 1.0;
			gl_TessLevelOuter[1] = 5.0;
			gl_TessLevelOuter[2] = 3.0;
		}
		
- gl_InvocationID

	Description: Zero-based index of the control point within the patch being processed by the current invocation of the tessellation control shader.
	Use: Tessellation control shader
	Type: Built-in input variable
	Example:
	
		if (gl_InvocationID == 0) ...
		
- gl_TessCoord

	Description: Barycentric coordinate of the vertex generated by the tessellator.
	Use: Tessellation evaluation shader
	Type: Built-in input variable
	Example:
	
		gl_Position = (gl_TessCoord.x * gl_in[0].gl_Position +
					   gl_TessCoord.y * gl_in[1].gl_Position +
					   gl_TessCoord.z * gl_in[2].gl_Position);
- EmitVertex

	Description: Produce a vertex at the output of the geometry shader.
	Use: Geometry shader
	Type: Function
	Example:
	
		gl_Position = gl_in[i].gl_Position;
		EmitVertex();
		
- gl_FragCoord

	Description: Position of the fragment within the window.
	Use: Fragment shader
	Type: Built-in input variable
	Example:
	
		gl_Position = vec4(0.0, 0.0, 0.5, 1.0);

- mix

	Description: Linear interpolation (taking different dimensionalities of vectors or scalars as the A and B inputs and taking scalars or matching vectors for t).
	Use: All
	Type: Function
	Example:

		mix(A, B, t);
