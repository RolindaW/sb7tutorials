
*
* QUALIFIER *
*

- layout

	Description: A layout qualifier (keyword) to affect where the storage for a variable comes from.
	Use: All
	Type: Custom input/output variable
	Example:
	
		layout (location = 0) in vec4 offset;

- in

	Description: A storage qualifier (keyword) to define input variables.
	Use: All
	Type: Custom (user-defined) input variable
	Example:
	
		layout (location = 0) in vec4 offset;
		gl_Position = vertices[gl_VertexID] + offset;

- out

	Description: A storage qualifier to define output variables.
	Use: All
	Type: Custom output variable
	Example:
	
		out vec4 color;
		color = vec4(0.0, 0.8, 1.0, 1.0);

*
* DATA *
*

- interface block

	Description: Group together a number of input/output variables. Block name (uppercase; match between stages - shaders) vs. instance name (lowercase; reference in shader). Only between stages; not input/output to/from OpenGL graphics pipeline.
	Use: All
	Type: Custom input/output variable
	Example:
	
		out vS_OUT
		{
			vec4 color;
		} vs_out;
		vs_out.color = vec4(0.0, 0.8, 1.0, 1.0);

- uniform (default block)

	Description: A storage qualifier to define input variables. It is possible to initialize them to a default value in a shader.
	Use: All
	Type: Custom constant input variable
	Example:
	
		uniform vec4 material_color;

- uniform block

	Description: Use case of interface blocks ("uniform" keyword). It is possible specifying a packing layout qualifier (packed, shared - default, std140) for the memory layout.
	Use: All
	Type: Custom read-only input variable
	Example:
	
		uniform SharedLayoutMaterialUniformBlock
		{
			vec3 color;
			float alpha;
		} material;
		
		- other -
		
		layout (std140) uniform StdLayoutMaterialUniformBlock
		{
			vec3 color;
		} material;
		vec3 mixed_color = mix(color, material.color, 0.4);

- shader storage block

	Description: Use case of interface blocks ("buffer" keyword). It is possible specifying a packing layout qualifier (packed, shared - default, std140, std430) for the memory layout.
	Use: All
	Type: Custom read/write input variable
	Example:
	
		layout (binding = 0, std430) buffer StdLayoutShaderStorage
		{
			vec4 foo;
		};

- atomic counter

	Description: Use case of interface blocks ("uniform atomic_uint" keywords).
	Use: All
	Type: Custom read/write input variable
	Example:
	
		layout (binding = 3, offset = 8) uniform atomic_uint my_variable;

- sampler*

	Description: A variable type to represent a texture of a particular type (sampler1D - GL_TEXTURE_1D; sampler2D - GL_TEXTURE_2D; etc.) and corresponding sampling parameters. Default samplers represent floating point data, but it is possible to refer signed or unsigned integer data textures using a prefix (e.g. isampler2D or usampler2D).
	Use: All
	Type: Custom input variable (based on uniform)
	Example:
	
		uniform sampler2D s;

- image*

	Description: A variable type to represent an image of a particular type (image1D - GL_TEXTURE_1D; image2D - GL_TEXTURE_2D; etc.). Default images represent floating point data, but it is possible to refer signed or unsigned integer data textures using a prefix (e.g. iimage2D or uimage2D). A format qualifier must be used for compatibility reasons because of loads (read from image).
	Use: All
	Type: Custom input variable (based on uniform)
	Example:
	
		layout (binding = 0, rgba32ui) readonly uniform uimage2D image_in;
		
		- other -
		
		layout (binding = 1) writeonly uniform uimage2D image_out;

*
* BUILT-IN VARIABLE *
*

- gl_PerVertex

	Description: Predefined output of the vertex shader.
	Use: Vertex shader (and later stages)
	Type: Built-in output interface block variable
	Example:
	
		out gl_Per_vertex
		{
			vec4 gl_Position;
			float gl_PointSize;
			float gl_ClipDistance[];
			float gl_CullDistance[];
		}

- gl_Position

	Description: Output position of the vertex in clip-space coordinates.
	Use: Vertex shader (and later stages)
	Type: Built-in output variable (mandatory)
	Example:
	
		gl_Position = vec4(0.0, 0.0, 0.5, 1.0);

- gl_PointSize (+ glEnable(GL_PROGRAM_POINT_SIZE))

	Description: Diameter (in pixels) of the point being rasterized; only makes sense when rendering point primitives.
	Use: Vertex shader (and later stages)
	Type: Built-in output variable
	Example:
	
		gl_PointSize = clamp(sqrt(1/(a + b*d + c*pow(d,2))));

- gl_VertexID

	Description:
	
		The index of the vertex that is being processed at the time.
		Value depends on drawing command category. Non-indexed: starts counting from the value given as parameter and counts upward one vertex at a time for vertex count. Indexed: corresponding index of the vertex.
	
	Use: Vertex shader
	Type: Built-in input variable
	Example:
	
		const vec4 vertices[3] = vec4[3](vec4( 0.25, -0.25, 0.5, 1.0),
										 vec4(-0.25, -0.25, 0.5, 1.0),
										 vec4( 0.25,  0.25, 0.5, 1.0));
		gl_Position = vertices[gl_VertexID];

- gl_InstanceID

	Description:
	
		The index of the geometry instance that is being processed at the time.
		Value depends on drawing command category. Non-instanced: 0 (always). Instanced: starts counting from the value given as parameter and counts upward one instance at a time for instance count.
	
	Use: Vertex shader
	Type: Built-in input variable
	Example:
	
		???

- gl_in / gl_out

	Description: Built in variable.
	Use: All
	Type: Built-in input/output variable
	Example:
	
		gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
		
- gl_TessLevelInner / gl_TessLevelOuter

	Description: Set tessellation levels (factor) so tessellation engine can use in later stage.
	Use: Tessellation control shader
	Type: Built-in output variable
	Example:
	
		if (gl_InvocationID == 0)
		{
			gl_TessLevelInner[0] = 5.0;
			gl_TessLevelOuter[0] = 1.0;
			gl_TessLevelOuter[1] = 5.0;
			gl_TessLevelOuter[2] = 3.0;
		}
		
- gl_InvocationID

	Description: Zero-based index of the control point within the patch being processed by the current invocation of the tessellation control shader.
	Use: Tessellation control shader
	Type: Built-in input variable
	Example:
	
		if (gl_InvocationID == 0) ...
		
- gl_TessCoord

	Description: Barycentric coordinate of the vertex generated by the tessellator.
	Use: Tessellation evaluation shader
	Type: Built-in input variable
	Example:
	
		gl_Position = (gl_TessCoord.x * gl_in[0].gl_Position +
					   gl_TessCoord.y * gl_in[1].gl_Position +
					   gl_TessCoord.z * gl_in[2].gl_Position);

- gl_FragCoord

	Description: Position of the fragment within the window.
	Use: Fragment shader
	Type: Built-in input variable
	Example:
	
		color = texelFetch(s, ivec2(gl_FragCoord.xy), 0);

*
* BUILT-IN FUNCTION *
*

- Summary

	Operators: +, -, *, /.
	Vector common: length() / distance() / normalize(), dot() / cross(), reflect() / refract(), faceForward(), outerProduct().
	Comparison: lessThan() / lessThanEqual(), greaterThan() / greaterThanEqual(), equal() / notEqual(), any() / all() / not().		
	Matrix common: transpose(), inverse(), determinant(), matrixCompMult().
	Arithmetic: abs(), sign(), ceil(), floor(), trunc(), round(), roundEven(), fract(), mod(), modf(), min(), max().
	Special: mix(), step(), smoothstep(), fma().
	Large (un)signed integer: uaddCarry() / usubBorrow(), imulExtended() / umulExtended().
	Trigonometry: sin(), cos(), tan(), inverses - asin(), acos(), atan() - and hyperbolic - sinh(), cosh(), tanh(), asinh(), acosh(), atanh().
	Exponential: pow(), exp(), log(), exp2(), log2(), sqrt(), inversesqrt().
	Angles: radians() / degrees().
	Data manipulation: frexp() / ldexp(), intBitsToFloat() / floatBitsToInt(), uintBitsToFloat() / floatBitsToUint(), isnan(), isinf().
	Data packing: packUnorm4x8() / unpackUnorm4x8(), packSnorm4x8() / unpackSnorm4x8(), packUnorm2x16() / unpackUnorm2x16(), packSnorm2x16() / unpackSnorm2x16(), packDouble2x32() / unpackDouble2x32().
	Bitfield: bitFieldExtract() / bitfieldInsert() / bitfieldReverse(), bitCount(), findLSB() / findMSB().

- texelFetch

	Description: Fetch an existing texel by specified (signed integer) unnormalized coordinates and mip level. Bypass sampling (not apply neither wrapping nor filtering). Output is always a vec4 variable (data type of vector elements will depend on target sampler, e.g. sampler1D - vec4; isampler2D - ivec4; usampler3D - uvec4). Default values for unused channels: 0 for color (RGB); 1 for alpha.
	Use: All
	Type: Function
	Example:
	
		vec4 color = texelFetch(s, ivec2(gl_FragCoord.xy), 0);

- texture

	Description: Get a texel (existing or not - calculated) by specified (floating point) normalized (size-independent) coordinates. Output is always a vec4 variable (data type of vector elements will depend on target sampler). Default values for unused channels: 0 for color (RGB); 1 for alpha.
	Use: All
	Type: Function
	Example:
	
		vec4 color = texture(s, gl_FragCoord.xy);

- textureSize

	Description: Retrieve the dimensions of a level of a texture. Output size depends on texture type (data type is always integer).
	Use: All
	Type: Function
	Example:
	
		ivec2 size = textureSize(s, 0);

- imageLoad

	Description: Read from an image variable (no filtering is performed). Output is always a vec4 variable (data type of vector elements will depend on target sampler, e.g. image1D - vec4; iimage2D - ivec4; uimage3D - uvec4).
	Use: All
	Type: Function
	Example:
	
		color = imageLoad(image_in, ivec2(gl_FragCoord.xy));

- imageStore

	Description: Write to an image variable (no filtering is performed).
	Use: All
	Type: Function
	Example:
	
		imageStore(image_out, ivec2(gl_FragCoord.xy), data.abgr);

- mix

	Description: Linear interpolation (taking different dimensionalities of vectors or scalars as the A and B inputs and taking scalars or matching vectors for t).
	Use: All
	Type: Function
	Example:

		mix(A, B, t);

- EmitVertex

	Description: Produce a vertex at the output of the geometry shader.
	Use: Geometry shader
	Type: Function
	Example:
	
		gl_Position = gl_in[i].gl_Position;
		EmitVertex();

- atomic operations on shader storage block

	Description: Operate on members of a shader storage block: atomicAdd, atomicAnd, atomicOr, ... Only for signed "int" and unsigned "uint" integer data type.
	Use: All
	Type: Function

- atomic operations on atomic counter

	Description: Operate on an atomic counter: atomicCounterIncrement, atomicCounterDecrement, atomicCounter. Only for unsigned integer "uint" data type.
	Use: All
	Type: Function

- atomic operations on image

	Description: Operate on members of an image: imageAtomicAdd, imageAtomicAnd, imageAtomicOr, ... Only for signed "int" and unsigned "uint" integer data type.
	Use: All
	Type: Function

- memoryBarrier / memoryBarrier*

	Description: Any memory reads or writes that you might have performed will complete before the function returns. Also specialized versions (e.g. memoryBarrierBuffers; orders transactions on reads and writes to buffers, but to nothing else).
	Use: All
	Type: Function

- bitFieldExtract

	Description: Extract a range ([offset, offset + bits - 1]) of bits from an integer (signed and unsigned); return it in the least significant bits of the result.
	Use: All
	Type: Function
	Example:
	
		int seed_lsb = bitfieldExtract(seed, 0, 10);
